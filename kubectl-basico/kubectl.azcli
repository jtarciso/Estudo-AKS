# Login no Azure
az login

# Parametros
rg=rg-basic
local=australiaeast
aks=aks-basic
sku=Standard_B2s
vnet=vnet-aks
snet=snet-aks
app=kubenet-app
k8sversion=''

# Instalar kubectl
az aks install-cli

#Criar RG
az group create -n $rg -l $local

#Criar vnet e subnet
az network vnet create -g $rg -n $vnet --address-prefixes 192.168.0.0/16 --subnet-name $snet --subnet-prefix 192.168.1.0/24

#Obter ID da VNET e atribuir a variavel
az network vnet show -g $rg -n $vnet --query id -o tsv
vnetId=$(az network vnet show -g $rg -n $vnet --query id -o tsv)

#Obter ID da SNET e atribuir a variavel
az network vnet subnet show -g $rg --vnet-name $vnet -n $snet --query id -o tsv
snetId=$(az network vnet subnet show -g $rg --vnet-name $vnet -n $snet --query id -o tsv)

#se estiver utilizando bash no windows
export MSYS_NO_PATHCONV=1

#cRIAR ROLE PARA AKS E VNET
az ad sp create-for-rbac -n $app

appId=7eedc6eb-48ab-42bd-b0f2-4a868f87e9d3
pass=G_88Q~PiWcqPFqiKXA4JHZR_wtmz-yA_bLM.Bci3

#listar app registrations
az ad app list -o table

#Atribuir permissão de contributor a vnet como network contributor
az role assignment create -assignee appId --scope $vnetId --role "Network Contributor"

#Criar aks
az aks create -g $rg -n $aks --node-count 1 --node-vm-size $sku --generate-ssh-keys \
    --network-plugin azure \
    --vnet-subnet-id $snetId \
    --docker-bridge-address 172.17.0.1/16 \
    --dns-service-ip 10.0.0.10 \
    --pod-cidr 10.244.0.0/16 \
    --service-cidr 10.0.0.0/16 \
    --service-principal $appId \
    --client-secret $pass

#Comandos AKS
#Obter Credenciais
y

#Obter versão
kubectl version -o yaml

#informações do cluster
kubectl cluster-info

#Configurações do cluester
kubectl config view

#API resources
kubectl api-resources

#API version
kubectl api-versions

#GET - Todos os objetos de todos os namespaces
kubectl get all
kubectl get all --all-namespaces

#GET - Obter Pods
kubectl get pods
kubectl get po
kubectl get po --all-namespaces
kubectl get pods --namespace kube-system

#GET - Obter namaspaces
kubectl get namespaces
kubectl get ns 
kubectl get pods -n kube-system

#GET - Obter nodes
kubectl get nodes
kubectl get no 
kubectl get nodes -o wide

# Criar POD com imagem NGINX
kubectl run nginx --image=nginx
kubectl run busybox --image=busybox --restart=Never^

#Delete pod
kubectl delete pod busybox
kubectl delete pod nginx

#Listar containers no POD
kubectl get pods -o jsonpath="{.item[*].spec.containers[*].name}"

#DESCRIBE - Descrever objetos kubernetes
kubectl describe pod nginx
kubectl describe node aks-nodepool1-32335981-vmss000000

#LOGS - Obter logs
kubectl logs nginx
kubectl logs nginx nginx #nome do container
kubectl logs nginx --since=30m nginx #ultimos 30 min

#Versões de APIs
kubectl api-versions

#Criar Pod com manifesto YAML
kubectl apply -f pod.yaml

#Criar Pod com 2 containers manifesto YAML (pratica nao recomendavel)
kubectl apply -f pods/pod-2containers.yaml

kubectl get pods --watch

#Executar comandos no container
export MSYS_NO_PATHCONV=1 #Para usar cominhos fisicos quando acessar o container no windows
kubectl exec -it pod-containers -c containers-1 /bin/bash
kubectl exec pod-containers --container containers-1 -- sh -c "cat /usr/share/nginx/html/index.html"

$Adicionar arquivo ao container
kubectl exec pod-containers --container containers-1 -- sh -c "echo \"<b>Arquivo criado do pod.</b>\" > /usr/share/nginx/html/pagina.html

#Listar nodes
kubectl get nodes
kubectl get no
kubectl get no -o wide
kubectl describe node aks-nodepool1-36924651-vmss00000

#Criar node no nodepool
az aks nodepool scale -g $rg --cluster-name $aks --name nodepool1 --node-count 2 --no-wait

#Listar nodePools no aks
az aks nodepool list -g $rg --cluster-name $aks -o table 

#Detalhes do nodePool System
az aks nodepool show -g $rg --cluster-name $aks -n nodepooluser -o yaml
az aks nodepool show -g $rg --cluster-name $aks -n nodepooluser --query powerState.code #consulta o node pool mostrando o status

#Adicionar nodePoll system
az aks nodepool add -g $rg --cluster-name $aks -n nodepool2 --node-count 3 --node-vm-size $sku --mode System

#Excluir node pool
az aks nodepool delete -g $rg --cluster-name $aks -n nodepooluser

#Adiciona nodePool user
az aks nodepool add -g $rg --cluster-name $aks -n nodepooluser --node-count 1 --node-vm-size $sku --mode User

#Parar e iniciar nodePool
az aks nodepool stop --nodepool-name nodepooluser -g $rg --cluster-name $aks
az aks nodepool start --nodepool-name nodepooluser -g $rg --cluster-name $aks


##Namespaces - Permite organizar logicamente os recursos em grupos. Serve como um cluster virtual dentro do cluster do Kubernetes. Logicamente isolados.
#Listar namespaces
kubectl get namespaces
kubectl get ns

#Descrever namespace
kubectl describe ns default

#Criar namespace
kubectl create namespace desenvolvimento
kubectl create namespace homologacao
kubectl create namespace producao

#Excluir namespace
kubectl delete namespace producao

#Criar namespace com manifesto yaml
kubectl apply -f ns-producao.yaml

#Listar labels do namespace
kubectl get namespaces --show-labels

#Criar pod no namespace producao
kubectl run nginx --image=nginx --namespace producao
kubectl get pods --namespace producao

#Criar pod com manifesto yaml no namespace desenvolvimento
kubectl apply -f pod-dev.yaml
kubectl get pods --namespace desenvolvimento

#Excluir namespace desenvolvimento
kubectl delete namespace desenvolvimento

#Listar os pods de todos os namespaces
kubectl get pods --all-namespaces

#Criar pods com annotations com arquivo yaml
kubectl apply -f pods/pod-annotation.yaml

##Labels (rotulos) - Permitem que o kuberbetes agrupem recursos relacionados. ex.: Agrupar recursos por ambiente.
##Selectors - Usados para consultar as labels. ex. o pode só será criado quando tiver a label x aplicada a ele.
##Annotation - Adicionar metadados para os objetos do kubernetes.

#Labels
kubectl apply -f pod-label-1.yaml
kubectl apply -f pod-label-2.yaml
kubectl apply -f pod-label-3.yaml

kubectl get pods 
kubectl get pods --show-labels

#Pesquisar por label
kubectl get pods -l "env=prod" --show-labels
kubectl get pods -l "app-nginx-web" --show-labels
kubectl get pods -l "env!=dev" --show-labels
kubectl get pods -l "env in (prod)" --show-labels

#Node Selectors
kubectl get nodes --show-labels
kubectl apply -f pod-selector.yaml

kubectl label node aks-nodepool1-34016488-vmss000000 ambiente=producao

#Node name
#Listar nodePool no cluster do aks
az aks nodepool list -g $rg --cluster-name $aks --output table
#listar node
kubectl get nodes

#Adicionar nodePool system
az aks nodepool add -g $rg --cluster-name $aks -n nodepool2 --mode system --node-count 1 --node-vm-size $sku

#Aplicando o pod ao node com o arquivo yaml
kubectl apply -f pod-nodename.yaml
kubectl describe pod pod-nodename


##Upgrade de versão

#Obter versões disponiveis do aks por regiao
az aks get-versions -l $local -o table
az aks get-versions -l brazilsouth -o table

#Obter a versão do AKS
az aks show -g $rg -n $aks -o yaml
az aks show -g $rg -n $aks --query currentKubernetesVersion -o yaml

#Obter upgrades disponiveis para atualizacao do kubernetes no aks
az aks get-upgrades -g $rg -n $aks -o table

#Criar parametro
k8sversionnew='1.25.6'


#upgrade no aks cluster e nodes
az aks upgrade -g $rg -n $aks --kubernetes-version $k8sversionnew

#Atualizar apenas nodePool
#Listar nodePool
az aks nodepool list -g $rg --cluster-name $aks -o table
#Criar nodePool com versão antiga
az aks nodepool add -g $rg --cluster-name $aks --name nodepool3 --kubernetes-version 1.24.10
#Atualizar node
az aks nodepool upgrade -g $rg --cluster-name $aks --name nodepool3 --kubernetes-version 1.25.6

###Deployment - Implanta o container no orquestrador. Adiciona, remove, implanta pods no replica set. Maneira correta de implantar um pod ou replica set.

###Replica set - 

#Listar replica sets
kubectl get replicasets
kubectl get replicasets --all-namespaces
kubectl get rs

#Criar replica set
kubectl apply -f replicaset.yaml

#Scale UP 
kubectl scale replicaset app-web --replicas=5

#Scale Down
kubectl scale replicaset app-web --replicas=2

#Excluir replicaset
kubectl delete rs app-web


###Deployments

#Listar desployments
kubectl get Deployments

#Aplicar deployments
kubectl apply -f deployment.yaml

#Escalar deployment UP
kubectl scale deployment deploy-app --replicas=4

#Escalar deployment Down
kubectl scale deployment deploy-app --replicas=2

#Excluir deployment
kubectl delete -f deployment.yaml

###Services - Expor o aplicativo ao mundo externo do cluster e comunicação interna no cluster.

#Listar servces
kubectl get services
kubectl get svc --watch

#Aplicar service
kubectl apply -f service.yaml

#Requisicao no endpoint
curl http://20.92.216.88




###Ingress Controller

#Criar namespace para os recursos do ingress
ns=ingress
kubectl create namespace $ns
kubectl get namespaces

#Adicionar repositorio oficial do ingress nginx
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo add stable https://charts.helm.sh/stable/
helm repo update

#Ip do loadBalancer
ip=20.227.27.142

#Usar Helm para fazer deploy do nginx ingress controller
helm install ingress-nginx ingress-nginx/ingress-nginx \
    --namespace $ns \
    --set controller.replicaCount=1 \
    --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
    --set controller.service.externalTrafficPolicy=Local \
    --set controller.service.locadBalancerIP="$ip"

#Listar services no namespace do ingress
kubectl get services -l app.kubernetes.io/name-ingress-nginx --namespace $ns

#Listar pods
kubectl get pods -n $ns

#Acessar public ip
curl http://$ip

#Aplicar deployment
kubectl apply -f app.yaml

#Aplicar Service
kubectl apply -f serviceapp.yaml

#Aplicar Ingress
kubectl apply -f appingress.yaml


##Traefik
 #Ip publico
 az network public-ip create -g $rg -n $ip --allocation-method Static -l $local --sku standard

 #adicionar traefik ao Repos Helm
 helm repo add traefik https://helm.traefik.io/traefik
 helm repo update

 #Obter iP
 az network public-ip show -g $rg -n $ip --query ipAddress -o tsv
 # 20.211.27.131
